
/*public static void generate_row_numbers() {
		int rowCount = 1;
		while (rowCount <= TOTAL_NUMBERS) {
			if(TOTAL_NUMBERS % rowCount == 0) {
				int columnCount = TOTAL_NUMBERS / rowCount;
				int[][] numbers = new int[rowCount][columnCount];
				int count = 1;
				for (int i = 0; i < rowCount; i++) {
					for (int j = 0; j < columnCount; j++) {
						if (count <= TOTAL_NUMBERS) {
							numbers[i][j] = count;
							count++;
						}
					}
				}
				generate_numbers(numbers);
			}
			rowCount++;
		}
	}*/
	
[9, 26, 29, 38, 42, 44, 45]
[1, 4, 5, 25, 27, 34, 35]
[6, 16, 24, 27, 40, 41, 42]
[9, 16, 18, 31, 32, 41, 45]
[1, 2, 10, 28, 38, 41, 44]
[1, 2, 8, 20, 26, 32, 33]
[10, 16, 20, 26, 27, 36, 45]
[8, 17, 20, 21, 28, 33, 35]
[1, 18, 20, 21, 27, 39, 41]
[7, 26, 32, 33, 37, 38, 44]
[6, 9, 12, 19, 25, 31, 36]
[5, 15, 23, 25, 34, 38, 39]
[7, 8, 11, 12, 18, 23, 26]
[9, 10, 18, 27, 30, 34, 37]
[21, 23, 24, 28, 31, 36, 42]
[1, 9, 12, 14, 18, 33, 44]
[1, 5, 12, 18, 23, 40, 44]
[5, 19, 21, 31, 36, 40, 41]
[3, 7, 20, 21, 31, 34, 37]
[1, 14, 15, 33, 41, 43, 44]
[1, 6, 10, 11, 20, 21, 29]
[4, 10, 25, 29, 31, 34, 42]
[5, 7, 12, 24, 34, 37, 39]
[13, 18, 22, 23, 25, 28, 32]
